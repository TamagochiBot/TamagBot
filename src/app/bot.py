import os
import random

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove

from src.db.db_queries import DataBase

db = DataBase('testDB.db')

from src.app.player import Player

player_info = Player()

bot = telebot.TeleBot(os.environ["TOKEN"])

states = {}
types = {}


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î
def registration(message: Message):
    db.create_player(id=message.from_user.id, pet_name=message.text, user_name=message.from_user.first_name)
    player_info.setId(message.from_user.id)
    bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫
def gen_markup() -> telebot.types.InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("Yes", callback_data="cb_yes"),
               InlineKeyboardButton("No", callback_data="cb_no"))
    return markup

#–°–æ–∑–¥–∞–Ω–∏–µ KeyBoard –∫–Ω–æ–ø–æ–∫
def MarkupFromList(listOfButtons):
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for buttonName in listOfButtons:
        btn=telebot.types.KeyboardButton(buttonName)
        markup.add(btn)
    return markup


@bot.message_handler(commands=['start'])
def start_message(message: Message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –ü–æ–ø—É–≥–ë–æ—Ç!')
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π –∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–æ–ø—É–≥ ü¶ú')
    if db.exists(table='player', id=message.from_user.id):
        bot.send_message(message.chat.id, '''–£ —Ç–µ–±—è ''')
    else:
        bot.send_message(message.chat.id, """–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–∏–Ω—É—Ç—É...""")
        bot.send_message(message.chat.id, """–ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?""")
        bot.register_next_step_handler(message, registration)

@bot.message_handler(commands=['cancel'])
def cancel(message: Message):
    if message.from_user.id in states:
        del states[message.from_user.id]
    db.save()
    bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['balance'])
def get_balance(message):
    player_info.setId(message.chat.id)
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {player_info.getBalance()}")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "cb_yes":
        bot.answer_callback_query(call.id, "Answer is Yes")
    elif call.data == "cb_no":
        bot.answer_callback_query(call.id, "Answer is No")


@bot.message_handler(commands=['attack'])
def message_handler(message):
    bot.send_message(message.chat.id, "Yes/no?", reply_markup=gen_markup())

@bot.message_handler(commands=['debug'])
def debug(message: Message):
    db.update(table='player', id=message.from_user.id, column='pet_name', data='Edic')
    db.save()

@bot.message_handler(commands=['create_event'])
def event_creator(message: Message):
    if db.exists(table='event', id=message.from_user.id, column='user_id'):
        if db.is_admin(message.from_user.id):
            bot.send_message(message.chat.id, text='–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ª–∏—à—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∏–≤–µ–Ω—Ç')
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞')
    else:
        db.create_event(id=message.from_user.id)
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–≤–µ–Ω—Ç–∞')
        states[message.from_user.id] = 'event_name'
        types[message.from_user.id] = 'unregular'

@bot.message_handler(commands=['create_regular'])
def event_creator(message: Message):
    global last_regular_event
    if db.is_admin(message.from_user.id):
        db.create_regular_event(id=message.from_user.id)
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–≤–µ–Ω—Ç–∞')
        states[message.from_user.id] = 'event_name'
        types[message.from_user.id] = 'regular'
        last_regular_event += 1
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.message_handler(commands=['event_delete'])
def event_deleter(message: Message):
    if db.exists(table='event', id=message.from_user.id, column='user_id'):
        db.delete_event(message.from_user.id)
        bot.send_message(message.chat.id, '–í–∞—à –∏–≤–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∏–≤–µ–Ω—Ç–æ–≤')

@bot.message_handler(commands=['event_edit'])
def event_edit(message: Message):
    if db.exists(table='event',id=message.from_user.id, column='user_id'):
        i = message.from_user.id
        bot.send_message(message.chat.id, text=f'\n–ò–≤–µ–Ω—Ç: {db.fetchone(table="event", id=i, column="event_name")}\n'
                                               f'–û–ø–∏—Å–∞–Ω–∏–µ: {db.fetchone(table="event", id=i, column="description")}\n'
                                               f'–û–ø—ã—Ç: {db.fetchone(table="event", id=i, column="experience")}\n'
                                               f'–î–µ–¥–ª–∞–π–Ω: {db.fetchone(table="event", id=i, column="deadline")}\n\n')
        bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=MarkupFromList(['–ù–∞–∑–≤–∞–Ω–∏–µ',
                                                                                                  '–û–ø–∏—Å–∞–Ω–∏–µ',
                                                                                                  '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞',
                                                                                                  '–î–µ–¥–∞–ª–π–Ω']))
        states[message.from_user.id] = 'edit_smth'
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')



@bot.message_handler(func=lambda message: message.from_user.id in states and
                                          states[message.from_user.id] in ['edit_smth',
                                                                           'edit_name',
                                                                           'edit_description',
                                                                           'edit_exp',
                                                                           'edit_deadline'
                                                                           ])
def event_redactor(message: Message):
    current_state = str(states[message.from_user.id])
    empty_markup = telebot.types.ReplyKeyboardRemove()
    match current_state:
        case 'edit_smth':
            match message.text:
                case '–ù–∞–∑–≤–∞–Ω–∏–µ':
                    states[message.from_user.id] = 'edit_name'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–û–ø–∏—Å–∞–Ω–∏–µ':
                    states[message.from_user.id] = 'edit_description'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–ö–æ–ª—á–∏–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞':
                    states[message.from_user.id] = 'edit_exp'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–î–µ–¥–∞–ª–π–Ω':
                    states[message.from_user.id] = 'edit_deadline'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case _ :
                    bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        case 'edit_name':
            db.update(table='event',id=message.from_user.id, column='event_name',data=message.text)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
        case 'edit_description':
            db.update(table='event', id=message.from_user.id, column='description', data=message.text)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
        case 'edit_exp':
            db.update(table='event', id=message.from_user.id, column='experience', data=int(message.text))
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
        case 'edit_deadline':
            db.update(table='event', id=message.from_user.id, column='deadline', data=message.text)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
        case _:
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@bot.message_handler(commands=['events'])
def events(message: Message):
    lst_of_events = db.fetchall("regular_event")
    text = '–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤\n–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n'

    for event in lst_of_events:
        text += f'''\n–ò–≤–µ–Ω—Ç: {event[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event[3]} \n–û–ø—ã—Ç: {event[4]} \n–î–µ–¥–ª–∞–π–Ω: {event[5]}\n\n'''

    text+="–ù–µ—Ä–µ–≥—É–ª—è–Ω—ã–µ:\n"

    lst_of_events = db.fetchall("event")

    for event in lst_of_events:
        text += f'''\n–ò–≤–µ–Ω—Ç: {event[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event[3]} \n–û–ø—ã—Ç: {event[4]} \n–î–µ–¥–ª–∞–π–Ω: {event[5]}\n\n'''

    bot.send_message(message.chat.id, text=str(text))

@bot.message_handler(
    func=lambda message: message.from_user.id in states and states[message.from_user.id] in [#'name_event', —á–µ —ç—Ç–æ?
                                                                                             'event_description',
                                                                                             'event_exp',
                                                                                             'event_deadline',
                                                                                             'event_name'
                                                                                             ])
def event_creator(message: Message):
    current_state = str(states[message.from_user.id])
    event_type = str(types[message.from_user.id])

    table = "event" if event_type == "unregular" else "regular_event"
    user_id = message.from_user.id if table == "event" else last_regular_event

    match current_state:
        case 'event_name':
            db.update(table=table, column='event_name', id=user_id, data=message.text)
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞')
            states[message.from_user.id] = 'event_description'
        case 'event_description':
            db.update(table=table, column='description', id=user_id, data=message.text)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
            states[message.from_user.id] = 'event_exp'
        case 'event_exp':
            if str.isdigit(message.text):
                db.update(table=table, column='experience', id=user_id, data=int(message.text))
                bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω')
                states[message.from_user.id] = 'event_deadline'
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
                states[message.from_user.id] = 'event_exp'
        case 'event_deadline':
            db.update(table=table, column='deadline', id=user_id, data=message.text)
            db.save()
            bot.send_message(message.chat.id, text='–ò–≤–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
            del states[message.from_user.id]
        case _:
            bot.send_message(message.chat.id, 'LOL')



@bot.message_handler(func= lambda message: str(message.text).split()[0] in ['–£–¥–∞—Ä–∏—Ç—å','—É–¥–∞—Ä–∏—Ç—å'])
def kick_smb(message: Message):
    photo = open('app/Images/fights/popug'+str(random.randint(1,3))+'.jpg','rb')
    bot.send_photo(message.chat.id, photo=photo, caption=f'{message.from_user.first_name} —É–¥–∞—Ä–∏–ª(–∞) {message.text.split(" ", 1)[1]}')

@bot.message_handler(func= lambda message: str(message.text).split()[0] in ['–ü–æ–ø—É–≥–±–æ—Ç','–ø–æ–ø—É–≥–±–æ—Ç'] and str(message.text).split()[1]=='–∫—Ç–æ')
def who_is(message: Message):
    names = db.fetchall_in_one('player','user_name')
    bot.send_message(message.chat.id, text=f'–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, {message.text[12:]} - —ç—Ç–æ {names[random.randint(0,len(names)-1)][0]}')

@bot.message_handler(func= lambda message:message.text=='–ü–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å')
def suspect(message: Message):
    video = open('app/Images/SuspectPopug.mp4','rb')
    bot.send_video(message.chat.id, video=video)


def run_polling():
    print("Bot has been started...")
    bot.polling(skip_pending=True)
