import math
import os
import random
import time as tm
from threading import Thread

import schedule
import telebot
from PIL import Image
from PIL import ImageOps
from telebot import custom_filters
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove, CallbackQuery

from db.db_queries import DataBase

db = DataBase('testDB.db')

from app.player import Player

player_info = Player()

bot = telebot.TeleBot(os.environ["TOKEN"])

states = {}
type_of_event = {}
participants_of_regular = {}
for_edit = {}
last_regular_event = 0
event_data = {}
event_interval = {}
case_data = {}


# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫
def gen_markup() -> telebot.types.InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("Yes", callback_data="cb_yes"),
               InlineKeyboardButton("No", callback_data="cb_no"))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ InlineKeyboard –∫–Ω–æ–ø–æ–∫
def InlineMarkupFromLists(listOfButtons, listOfCalls):
    markup = telebot.types.InlineKeyboardMarkup()
    for i in range(len(listOfCalls)):
        btn = telebot.types.InlineKeyboardButton(text=listOfButtons[i], callback_data=listOfCalls[i])
        markup.add(btn)
    return markup


# –°–æ–∑–¥–∞–Ω–∏–µ KeyBoard –∫–Ω–æ–ø–æ–∫
def MarkupFromList(listOfButtons):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for buttonName in listOfButtons:
        btn = telebot.types.KeyboardButton(buttonName)
        markup.add(btn)
    return markup


def run_threaded(chat_id:int, id: int, table: str):
    Thread(target=notification_event,
           kwargs={"chat_id":chat_id, "id": id, "table": table}).start()

    if table == "event":
        return schedule.CancelJob


def notification_event(chat_id:int, id: int, table: str):
    global event_data
    if table == "event":
        bot.send_message(chat_id, text=f'–í–∞—à –∏–≤–µ–Ω—Ç:\n'
                                               f'{event_data[id][0]}\n'
                                               f'–û–ø–∏—Å–∞–Ω–∏–µ: {event_data[id][1]}\n'
                                               f'–û–ø—ã—Ç: {event_data[id][2]}\n'
                                               f'–ó–∞–∫–æ–Ω—á–∏–ª—Å—è!')
        db.delete_event(id)
    else:
        bot.send_message(chat_id, text=f'–í–∞—à –∏–≤–µ–Ω—Ç:\n'
                                               f'{event_data[id][0]}\n'
                                               f'–û–ø–∏—Å–∞–Ω–∏–µ: {event_data[id][1]}\n'
                                               f'–û–ø—ã—Ç: {event_data[id][2]}\n'
                                               f'–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants_of_regular[id]}')
    # return schedule.CancelJob


@bot.message_handler(commands=['help'])
def helper(message: Message):
    photo = open('/Images/popug.jpg', 'rb')
    text = '–ü—Ä–∏–≤–µ—Ç, —è –ü–æ–ø—É–≥–ë–æ—Ç ü¶ú\n\n' \
           '–ß—Ç–æ —è –º–æ–≥—É?\n' \
           '–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≤–µ–Ω—Ç—ã - —Ä–µ–≥—É–ª—è—Ä–∞–Ω—ã–µ –∏ –Ω–µ—Ä–µ—É–ª—è—Ä–Ω—ã–µ. ' \
           '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–≤–æ—Ç—Ä—è—é—Ç—Å—è –∑–∞–¥–∞–Ω–Ω–æ–µ —Ç–æ–±–æ–π –≤—Ä–µ–º—è –∏ –∏—Ö –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã. ' \
           '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Ö –º–æ–∂–µ—Ç —Å–æ–∑–¥–≤–∞–≤–∞—Ç—å –ª—é–±–æ–π –ø–æ–ø—É–≥, —Ç—ã –º–æ–∂–µ—à—å –∏–º–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞\n' \
           '–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /create_event –¥–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏ /create_regular –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ.\n' \
           '–¢–∞–∫–∂–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∏—á)\n' \
           '–û—Ç–ø—Ä–∞–≤—å "–ü–æ–ø—É–≥–ë–æ—Ç –∫—Ç–æ [—Ç–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ]"\n' \
           '–ò–ª–∏ –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å –∫–æ–≥–æ –Ω–∏–±—É–¥—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å "–ü–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å"'
    bot.send_photo(message.chat.id, photo=photo, caption=text)


@bot.message_handler(commands=['start'])
def start_message(message: Message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –ü–æ–ø—É–≥–ë–æ—Ç!')
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π –∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–æ–ø—É–≥ ü¶ú')
    if db.exists(table='player', id=message.from_user.id):
        bot.send_message(message.chat.id, '''–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–ø—É–≥)''')
    else:
        bot.send_message(message.chat.id, """–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–∏–Ω—É—Ç—É...""")
        bot.send_message(message.chat.id, """–ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?""")
        states[message.from_user.id] = 'registry'


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î
@bot.message_handler(func=lambda message: message.from_user.id in states and
                     states[message.from_user.id] == 'registry')
def registration(message: Message):
    db.create_player(id=message.from_user.id, pet_name=message.text, user_name=message.from_user.username)
    bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    random_body = str(random.randint(1, 5))
    random_head = str(random.randint(1, 5))
    db.add_body_skin(message.from_user.id, random_body)
    db.add_head_skin(message.from_user.id, random_head)
    db.add_weapon_skin(message.from_user.id, "0")
    db.set_body_skin(message.from_user.id, random_body)
    db.set_head_skin(message.from_user.id, random_head)
    db.set_weapon_skin(message.from_user.id, "0")
    db.save()
    pet_image = CreatePetImage(random_body, random_head, "0")
    bot.send_photo(message.chat.id, pet_image, caption="–≠—Ç–æ –≤–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!\n"
                                                       "–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ "
                                                       "–∏–∑–º–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–≤–æ–µ–≥–æ "
                                                       "–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /customize_pet",
                   reply_markup=ReplyKeyboardRemove())
    del states[message.from_user.id]


@bot.message_handler(commands=['cancel'])
def cancel(message: Message):
    if message.from_user.id in states:
        del states[message.from_user.id]
    db.save()
    bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['balance'])
def get_balance(message):
    player_info.setId(message.chat.id)
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {player_info.getBalance()}")


@bot.message_handler(commands=['attack'])
def message_handler(message):
    bot.send_message(message.chat.id, "Yes/no?", reply_markup=gen_markup())


@bot.message_handler(commands=['debug'])
def debug(message: Message):
    db.update(table='player', id=message.from_user.id, column='is_admin', data=True)
    db.save()


@bot.message_handler(commands=['create_event'])
def create_event(message: Message):
    if db.exists(table='event', id=message.from_user.id, column='user_id'):
        if db.is_admin(message.from_user.id):
            bot.send_message(message.chat.id, text='–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ª–∏—à—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∏–≤–µ–Ω—Ç')
        else:
            bot.send_message(message.chat.id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞')
    else:
        if db.exists(table="player", id=message.from_user.id, column='id'):
            db.create_event(id=message.from_user.id, chat_id=message.chat.id)
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–≤–µ–Ω—Ç–∞')
            states[message.from_user.id] = 'event_name'
            type_of_event[message.from_user.id] = 'unregular'
        else:
            bot.send_message(message.chat.id, text='–°–ø–µ—Ä–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å')

def check_scheduler():
    while True:
        schedule.run_pending()
        tm.sleep(1)


@bot.message_handler(commands=['create_regular'])
def create_regular(message: Message):
    global last_regular_event
    if db.is_admin(message.from_user.id):
        last_regular_event += 1
        db.create_regular_event(id=last_regular_event,tele_id=message.from_user.id,chat_id=message.chat.id)
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–≤–µ–Ω—Ç–∞')
        states[message.from_user.id] = 'event_name'
        type_of_event[message.from_user.id] = 'regular'
        participants_of_regular[last_regular_event] = ''
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

def mrk_for_intervals() -> telebot.types.InlineKeyboardMarkup:
    mrk = InlineKeyboardMarkup()
    mrk.add(InlineKeyboardButton(text='–ú–∏–Ω—É—Ç—ã',callback_data='–º–∏–Ω—É—Ç–∞—Ö'))
    mrk.add(InlineKeyboardButton(text='–ß–∞—Å—ã', callback_data='—á–∞—Å–∞—Ö'))
    mrk.add(InlineKeyboardButton(text='–î–Ω–∏', callback_data='–¥–Ω—è—Ö'))
    mrk.add(InlineKeyboardButton(text='–ù–µ–¥–µ–ª–∏', callback_data='–Ω–µ–¥–µ–ª—è—Ö'))
    return mrk

@bot.message_handler(
    func=lambda message: message.from_user.id in states and states[message.from_user.id] in [
        'event_description',
        'event_exp',
        'event_deadline',
        'event_name'
    ])
def create_event(message: Message):
    global last_regular_event
    current_state = str(states[message.from_user.id])
    event_type = str(type_of_event[message.from_user.id])

    table = "event" if event_type == "unregular" else "regular_event"
    id = message.from_user.id if table == "event" else last_regular_event

    match current_state:
        case 'event_name':
            db.update(table=table, column='event_name', id=id, data=message.text)
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞')
            states[message.from_user.id] = 'event_description'
        case 'event_description':
            db.update(table=table, column='description', id=id, data=message.text)
            mrk = InlineKeyboardMarkup()
            mrk.add(InlineKeyboardButton(text='–ù–µ—Ç', callback_data='none'))
            mrk.add(InlineKeyboardButton(text='–ë—Ä–æ–Ω–∑–æ–≤—ã–π', callback_data='bronze'))
            mrk.add(InlineKeyboardButton(text='–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', callback_data='silver'))
            mrk.add(InlineKeyboardButton(text='–ó–æ–ª–æ—Ç–æ–π', callback_data='gold'))
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∫–µ–π—Å –¥–ª—è –∏–≤–µ–Ω—Ç–∞', reply_markup=mrk)
            states[message.from_user.id] = 'event_case'
        case 'event_exp':
            if str.isdigit(message.text):
                mrk = mrk_for_intervals()
                db.update(table=table, column='experience', id=id, data=int(message.text))
                bot.send_message(message.chat.id, '–î–µ–¥–ª–∞–π–Ω –±—É–¥–µ—Ç...', reply_markup=mrk)
                states[message.from_user.id] = 'event_deadline_interval'
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
                # states[message.from_user.id] = 'event_exp' –Ω–∞—Ö–µ—Ä–∞ —ç—Ç–æ –¥–µ–ª–∞—Ç—å?
        case 'event_deadline':
            db.update(table=table, column='deadline', id=id, data=message.text)
            db.save()

            global event_interval
            global event_data

            if table != "event":
                event_data[id] = (db.get_regular_name(id), db.get_regular_description(id), db.get_regular_experience(id))
            else:
                event_data[id] = (db.get_event_name(id), db.get_event_description(id), db.get_event_experience(id))

            match event_interval[message.from_user.id]:
                case '–º–∏–Ω—É—Ç–∞—Ö':
                    schedule.every(int(message.text)).minutes.do(run_threaded, table=table, id=id, chat_id=message.chat.id).tag(id)
                case '—á–∞—Å–∞—Ö':
                    schedule.every(int(message.text)).hours.do(run_threaded, table=table, id=id, chat_id=message.chat.id).tag(id)
                case '–¥–Ω—è—Ö':
                    schedule.every(int(message.text)).days.do(run_threaded, table=table, id=id, chat_id=message.chat.id).tag(id)
                case '–Ω–µ–¥–µ–ª—è—Ö':
                    schedule.every(int(message.text)).weeks.do(run_threaded, table=table, id=id, chat_id=message.chat.id).tag(id)

            bot.send_message(message.chat.id, text='–ò–≤–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
            del states[message.from_user.id]
            del event_interval[message.from_user.id]
            del type_of_event[message.from_user.id]
        case _:
            bot.send_message(message.chat.id, 'LOL')

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@bot.callback_query_handler(
    func=lambda call: call.from_user.id in states and states[call.from_user.id] in ['event_deadline_interval', 'edit_deadline_interval'])
def deadline_interval(call: CallbackQuery):
    bot.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ {str(call.data)}', message_id=call.message.message_id,
                          chat_id=call.message.chat.id)
    if states[call.from_user.id] == 'event_deadline_interval':
        states[call.from_user.id] = 'event_deadline'
    else:
        states[call.from_user.id] = 'edit_deadline'
    print(str(call.data[0]))
    event_interval[call.from_user.id] = str(call.data)


@bot.callback_query_handler(func=lambda call: call.from_user.id in states and states[call.from_user.id] == 'event_case')
def event_case(call: CallbackQuery):
    bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                          text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å–≤–æ –æ–ø—ã—Ç–∞')
    match call.data:
        case 'none':
            ...
        case 'bronze':
            ...
        case 'silver':
            ...
        case 'gold':
            ...
        case 'skin':
            ...
    states[call.from_user.id] = 'event_exp'
    # db.set_event_case()


@bot.message_handler(commands=['delete_event'])
def delete_event(message: Message):
    if db.exists(table='event', id=message.from_user.id, column='user_id'):
        db.delete_event(message.from_user.id)
        bot.send_message(message.chat.id, '–í–∞—à –∏–≤–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
        schedule.clear(message.from_user.id)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∏–≤–µ–Ω—Ç–æ–≤')


@bot.message_handler(commands=["delete_regular"])
def delete_regular(message: Message):
    lst = get_list_of_regular()
    if len(lst) != 0:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∏–≤–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
        bot.send_message(message.chat.id, get_list_of_regular())
        states[message.from_user.id] = "delete_regular"
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")


@bot.message_handler(func=lambda message: message.from_user.id in states and
                     states[message.from_user.id] == "delete_regular")
def delete_regular(message: Message):
    try:
        id = int(message.text)

        if not db.exists(table="regular_event", id=id):
            raise "Not exists"
        
        schedule.clear(id)
        #last_regular_event -= 1

        db.delete_regular(id)
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")

        del states[message.from_user.id]
        del participants_of_regular[id]
        del event_data[id]
    except Exception as ex:
        bot.send_message(message.chat.id, ex)


def describe_event(id: int, table: str) -> None:
    bot.send_message(id, text=f'\n–ò–≤–µ–Ω—Ç: {db.get_event_name(id)}\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {db.get_event_description(id)}\n'
                              f'–û–ø—ã—Ç: {db.get_event_experience(id)}\n'
                              f'–î–µ–¥–ª–∞–π–Ω –≤ {db.get_event_deadline_type(id)}: {db.get_event_deadline(id)}\n\n')


@bot.message_handler(commands=['edit_event'])
def edit_event(message: Message):
    if db.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=MarkupFromList(['–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ',
                                                                                                  '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'
                                                                                                  ]))
        states[message.from_user.id] = 'choose_type'
        for_edit[message.from_user.id] = (0, '')
    else:
        if db.exists(table='event', id=message.from_user.id, column='user_id'):
            id = message.from_user.id
            describe_event(id, "event")
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=MarkupFromList(['–ù–∞–∑–≤–∞–Ω–∏–µ',
                                                                                                      '–û–ø–∏—Å–∞–Ω–∏–µ',
                                                                                                      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞',
                                                                                                      '–î–µ–¥–ª–∞–π–Ω']))
            states[message.from_user.id] = 'edit_smth'
            type_of_event[message.from_user.id] = "unregular"
            id_for_edit = message.from_user.id
            table_for_edit = 'event'
            for_edit[message.from_user.id] = (id_for_edit, table_for_edit)
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')


@bot.message_handler(func=lambda message: message.from_user.id in states and
                     states[message.from_user.id] in [
                                              'choose_type',
                                              'choose_id',
                                              'edit_smth',
                                              'edit_name',
                                              'edit_description',
                                              'edit_exp',
                                              'edit_deadline'
                                          ])
def edit_event(message: Message):
    global last_regular_event
    global event_data
    current_state = str(states[message.from_user.id])
    empty_markup = telebot.types.ReplyKeyboardRemove()
    #if states[message.from_user.id] != "choose_id" and type_of_event[message.from_user.id] == "regular":
    id_for_edit, table_for_edit = for_edit[message.from_user.id]

    match current_state:
        case 'choose_type':
            match message.text:
                case "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ":
                    if last_regular_event != 0:
                        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ id –∏–≤–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?')
                        bot.send_message(message.chat.id, get_list_of_regular())

                        type_of_event[message.from_user.id] = "regular"
                        states[message.from_user.id] = "choose_id"
                        for_edit[message.from_user.id] = (for_edit[message.from_user.id][0],"regular_event")
                    else:
                        bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤')
                        del states[message.from_user.id]
                case "–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ":
                    if db.exists(table='event', id=message.from_user.id, column='user_id'):
                        describe_event(id=message.from_user.id, table="event")

                        bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?',
                                         reply_markup=MarkupFromList(['–ù–∞–∑–≤–∞–Ω–∏–µ',
                                                                      '–û–ø–∏—Å–∞–Ω–∏–µ',
                                                                      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞',
                                                                      '–î–µ–¥–∞–ª–π–Ω']))

                        states[message.from_user.id] = 'edit_smth'
                        type_of_event[message.from_user.id] = "unregular"
                        for_edit[message.from_user.id] = (message.chat.id, "event")
                    else:
                        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
                        del states[message.from_user.id]
                case _:
                    bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        case "choose_id":
            try:
                for_edit[message.from_user.id] = (int(message.text), "regular_event")
                if not db.exists(table="regular_event", id=for_edit[message.from_user.id][0]):
                    raise "doesn't exist"
                states[message.from_user.id] = "edit_smth"
                bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?', reply_markup=MarkupFromList(['–ù–∞–∑–≤–∞–Ω–∏–µ',
                                                                                                          '–û–ø–∏—Å–∞–Ω–∏–µ',
                                                                                                          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞',
                                                                                                          '–î–µ–¥–ª–∞–π–Ω']))
            except:
                bot.send_message(message.chat.id, "–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–π–¥–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        case 'edit_smth':

            match message.text:
                case '–ù–∞–∑–≤–∞–Ω–∏–µ':
                    states[message.from_user.id] = 'edit_name'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–û–ø–∏—Å–∞–Ω–∏–µ':
                    states[message.from_user.id] = 'edit_description'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞':
                    states[message.from_user.id] = 'edit_exp'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case '–î–µ–¥–ª–∞–π–Ω':
                    mrk = mrk_for_intervals()
                    bot.send_message(message.chat.id, '–î–µ–¥–ª–∞–π–Ω –±—É–¥–µ—Ç...', reply_markup=mrk)
                    states[message.from_user.id] = 'edit_deadline_interval'
                    #states[message.from_user.id] = 'edit_deadline'
                    bot.send_message(message.chat.id, '–Ø –≤–∞—Å —Å–ª—É—à–∞—é...', reply_markup=empty_markup)
                case _:
                    bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        case 'edit_name':
            db.update(table=table_for_edit, id=id_for_edit, column='event_name', data=message.text)
            event_data[id_for_edit] = (message.text, event_data[id_for_edit][1], event_data[id_for_edit][2])
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
            del type_of_event[message.from_user.id]
            del for_edit[message.from_user.id]
        case 'edit_description':
            db.update(table=table_for_edit, id=id_for_edit, column='description', data=message.text)
            event_data[id_for_edit] = (event_data[id_for_edit][0], message.text, event_data[id_for_edit][2])
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
            del type_of_event[message.from_user.id]
            del for_edit[message.from_user.id]
        case 'edit_exp':
            db.update(table=table_for_edit, id=id_for_edit, column='experience', data=int(message.text))
            event_data[id_for_edit] = (event_data[id_for_edit][0], event_data[id_for_edit][1], message.text)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()
            del states[message.from_user.id]
            del type_of_event[message.from_user.id]
            del for_edit[message.from_user.id]
        case 'edit_deadline':
            db.update(table=table_for_edit, id=id_for_edit, column='deadline', data=message.text)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!', reply_markup=empty_markup)
            db.save()

            schedule.clear(id_for_edit)
            match event_interval[message.from_user.id]:
                case '–º–∏–Ω—É—Ç–∞—Ö':
                    schedule.every(int(message.text)).minutes.do(run_threaded, table=table_for_edit, id=id_for_edit, chat_id=message.chat.id).tag(id_for_edit)
                case '—á–∞—Å–∞—Ö':
                    schedule.every(int(message.text)).hours.do(run_threaded, table=table_for_edit, id=id_for_edit, chat_id=message.chat.id).tag(id_for_edit)
                case '–¥–Ω—è—Ö':
                    schedule.every(int(message.text)).days.do(run_threaded, table=table_for_edit, id=id_for_edit, chat_id=message.chat.id).tag(id_for_edit)
                case '–Ω–µ–¥–µ–ª—è—Ö':
                    schedule.every(int(message.text)).weeks.do(run_threaded, table=table_for_edit, id=id_for_edit, chat_id=message.chat.id).tag(id_for_edit)

            del states[message.from_user.id]
            del type_of_event[message.from_user.id]
            del for_edit[message.from_user.id]
        case _:
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


def get_list_of_regular():
    text = str()
    lst_of_events = db.fetchall("regular_event")
    for event in lst_of_events:
        text += f'''ID:{event[0]}\n–ò–≤–µ–Ω—Ç: {event[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event[3]} \n–û–ø—ã—Ç: {event[4]} \n–î–µ–¥–ª–∞–π–Ω –≤ {event[6]}: {event[5]}\n\n'''
    return text


def get_list_of_unregular():
    text = str()
    lst_of_events = db.fetchall("event")
    for event in lst_of_events:
        text += f'''–ò–≤–µ–Ω—Ç: {event[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event[3]} \n–û–ø—ã—Ç: {event[4]} \n–î–µ–¥–ª–∞–π–Ω {event[6]}: {event[5]}\n\n'''
    return text


@bot.message_handler(commands=['events'])
def get_events(message: Message):
    text = '–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤\n–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n'
    text += get_list_of_regular()
    text += '–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n'
    text += get_list_of_unregular()

    bot.send_message(message.chat.id, text=text)


# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–í–ï–ù–¢–û–í

execute = {}


@bot.message_handler(func=lambda message: message.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å' and not (message.reply_to_message is None))
def execute_event(message: Message):
    execute[message.from_user.id] = message.reply_to_message.from_user.id
    if db.is_admin(message.from_user.id):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row_width = 2
        btn1 = InlineKeyboardButton(text='–†–µ–≥—É–ª—è—Ä–Ω—ã–π', callback_data='reg')
        btn2 = InlineKeyboardButton(text='–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π', callback_data='irreg')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, text='–ö–∞–∫–æ–π –∏–≤–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–ø—É–≥?', reply_markup=markup)
        execute[message.from_user.id] = message.reply_to_message.from_user.id
        states[message.from_user.id] = 'type_choose'
    else:
        if db.exists(table='event', id=message.from_user.id, column='user_id'):
            experience_change(execute[message.from_user.id], db.get_event_experience(message.from_user.id))
            bot.send_message(message.chat.id,
                             f'–ü–æ–ø—É–≥ {db.get_user_name(execute[message.from_user.id])} –ø–æ–ª—É—á–∏–ª {db.get_event_experience(message.from_user.id)} –æ–ø—ã—Ç–∞')
        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∏–≤–µ–Ω—Ç–∞')


@bot.message_handler(commands=['info'])
def info(message: Message):
    if message.from_user.id in states:
        txt = f'{message.from_user.id}\n' \
              f'{states[message.from_user.id]}'
        bot.send_message(message.chat.id, txt)
    else:
        bot.send_message(message.chat.id, 'akjbrvnajv')


@bot.callback_query_handler(
    func=lambda call: call.data in ['reg', 'irreg'] and call.from_user.id in states and states[
        call.from_user.id] in ['type_choose'])
def admin_access(call: CallbackQuery):
    global last_regular_event
    match call.data:
        case 'reg':
            list_of_events = get_list_of_regular()
            if last_regular_event != 0:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                      text='–ò–≤–µ–Ω—Ç—ã:\n' + list_of_events)
                bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ ID –∏–≤–µ–Ω—Ç–∞')
                states[call.from_user.id] = 'id_choose'
            else:
                bot.send_message(call.message.chat.id, '–ù–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤')
                del states[call.from_user.id]
        case 'irreg':
            if db.exists(table='event', id=call.from_user.id, column='user_id'):
                experience_change(execute[call.from_user.id],
                                  db.get_event_experience(call.from_user.id))
                bot.send_message(call.message.chat.id,
                                 f'–ü–æ–ø—É–≥ {db.get_user_name(execute[call.from_user.id])} –ø–æ–ª—É—á–∏–ª {db.get_event_experience(call.from_user.id)} –æ–ø—ã—Ç–∞')
            else:
                bot.send_message(call.message.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∏–≤–µ–Ω—Ç–∞')


@bot.message_handler(
    func=lambda message: message.from_user.id in states and states[message.from_user.id] in ['id_choose'])
def choose_event(message: Message):
    try:
        for_execute = int(message.text)
        if not db.exists(table="regular_event", id=for_execute):
            raise "doesn't exist"
        else:
            if db.exists(table='event', id=message.from_user.id, column='user_id'):
                db.add_regular_player(for_execute,message.from_user.username)
                experience_change(execute[message.from_user.id], db.get_event_experience(message.from_user.id))
                bot.send_message(message.chat.id, '–ü–æ–ø—É–≥ –≤—ã–ø–æ–ª–∏–Ω–ª –∏–≤–µ–Ω—Ç –∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å–ø–∏–∫–æ–∫ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –µ–≥–æ')
            else:
                bot.send_message(message.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∏–≤–µ–Ω—Ç–∞')
    except:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–π–¥–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò–í–ï–ù–¢–û–í


# FUN


@bot.message_handler(func=lambda message: str(message.text).split()[0] in ['–û—Ç–º—É–¥–æ—Ö–∞—Ç—å', '–æ—Ç–º—É–¥–æ—Ö–∞—Ç—å'])
def kick_smb(message: Message):
    photo = open('app/Images/fights/popug' + str(random.randint(1, 3)) + '.jpg', 'rb')
    bot.send_photo(message.chat.id, photo=photo,
                   caption=f'{message.from_user.first_name} –æ—Ç–º—É–¥–æ—Ö–∞–ª(–∞) {message.text[11:]}')


@bot.message_handler(
    func=lambda message: str(message.text).split()[0] in ['–ü–æ–ø—É–≥–±–æ—Ç', '–ø–æ–ø—É–≥–±–æ—Ç'] and str(message.text).split()[
        1] == '–∫—Ç–æ')
def who_is(message: Message):
    names = db.fetchall_in_one('player', 'user_name')
    bot.send_message(message.chat.id,
                     text=f'–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ,{message.text[12:]} - —ç—Ç–æ {names[random.randint(0, len(names) - 1)][0]}')


@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å')
def suspect(message: Message):
    video = open('app/Images/SuspectPopug.mp4', 'rb')
    bot.send_video(message.chat.id, video=video)


# FUN


kb_it_ce = InlineKeyboardMarkup(row_width=1)
btn_change = InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å', callback_data='change')
kb_it_ce.add(btn_change)
btn_dont_change = InlineKeyboardButton(text='–ù–µ –º–µ–Ω—è—Ç—å', callback_data='dont change')
kb_it_ce.add(btn_dont_change)

kb_it_ce_sn = InlineKeyboardMarkup(row_width=1)
btn_change_skin = InlineKeyboardButton(text='–ó–∞–º–µ–Ω–∏—Ç—å', callback_data='change skin')
kb_it_ce_sn.add(btn_change_skin)
btn_dont_change_skin = InlineKeyboardButton(text='–ù–µ –º–µ–Ω—è—Ç—å', callback_data='dont change skin')
kb_it_ce_sn.add(btn_dont_change_skin)


def switch_item_from_case(message: Message, person_id, item_type, item_name, item_stats, item_mod, item_rare):
    db_item_name = ""
    item_type_for_text = ""
    match item_type:
        case 0:
            db_item_name = "helmet"
            item_type_for_text = "–®–ª–µ–º"
        case 1:
            db_item_name = "chestplate"
            item_type_for_text = "–ù–∞–≥—Ä—É–¥–Ω–∏–∫"
        case 2:
            db_item_name = "item1"
            item_type_for_text = "–û—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è"
        case 3:
            db_item_name = "item2"
            item_type_for_text = "–û—Ä—É–∂–∏–µ –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è"

    current_name = db.get_worn_item_name(person_id, db_item_name)
    current_stats = db.get_worn_item_stats(person_id, db_item_name)
    current_mod = db.get_worn_item_mod(person_id, db_item_name)
    current_rare = db.get_worn_item_rarity(person_id, db_item_name)
    states[person_id] = "switching_item"
    case_data[person_id] = [current_name, current_stats, current_rare, current_mod, db_item_name]
    bot.send_message(message.chat.id, text=f'–û–≥–æ! –¢–µ–±–µ –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç *{item_name}*! \n'
                                           f'–•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ —Å *{current_name}*? \n'
                                           f'–ü—Ä–∏ –∑–∞–º–µ–Ω–µ: \n'
                                           f'–ò–º—è: ___{current_name}___ -> ___{item_name}___ \n'
                                           f'–¢–∏–ø: ___{item_type_for_text}___ \n'
                                           f'–†–µ–¥–∫–æ—Å—Ç—å: ___{current_rare}___ -> ___{item_rare}___ \n'
                                           f'–°—Ç–∞—Ç—ã: ___{current_stats}___ -> ___{item_stats}___ \n'
                                           f'–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: ___{current_mod}___ -> ___{item_mod}___ \n',
                     reply_markup=kb_it_ce, parse_mode="Markdown")


def switch_skin_from_case(message: Message, person_id, item_type, item_name, item_rare):
    item_type_for_text = "skin"
    db_item_name = ""
    current_skin = ""
    match item_type:
        case 0:
            db_item_name = "helmet"
            item_type_for_text = "—à–ª–µ–º"
            current_skin = db.get_head_skin(person_id)
            db.add_head_skin(person_id, item_name)
            db.save()
        case 1:
            db_item_name = "chestplate"
            item_type_for_text = "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫"
            current_skin = db.get_body_skin(person_id)
            db.add_body_skin(person_id, item_name)
            db.save()
        case 2:
            db_item_name = "item1"
            item_type_for_text = "–æ—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è"
            current_skin = db.get_weapon_skin(person_id)
            db.add_weapon_skin(person_id, item_name)
            db.save()
    states[person_id] = "switching_skin"
    case_data[person_id] = [item_name, db_item_name]
    bot.send_message(message.chat.id, text=f'–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–µ–±–µ –≤—ã–ø–∞–ª —Å–∫–∏–Ω *{item_name}*, '
                                           f'—Ä–µ–¥–∫–æ—Å—Ç–∏ ___{item_rare}___! \n'
                                           f'–≠—Ç–æ ___{item_type_for_text}___ \n'
                                           f'–•–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–∫–∏–Ω ___{current_skin}___ –Ω–∞ ___{item_name}___? \n'
                                           f'–ù–µ –±–æ–π—Å—è, –æ–±–∞ —Å–∫–∏–Ω–∞ –±—É–¥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã', reply_markup=kb_it_ce)


@bot.callback_query_handler(func=lambda call: call.data in ['change', 'dont change']
                            and call.from_user.id in states and states[call.from_user.id] == "switching_item")
def switching_or_not(call: CallbackQuery):
    if call.data == "change":
        person_id = call.from_user.id
        new_name, new_stats, new_rare, new_mod, new_type = case_data[person_id][:4]
        new_item_id = db.create_item(person_id, new_type, new_name, new_rare, new_stats, new_mod)
        db.set_item(person_id, new_type, new_item_id)
        bot.send_message(person_id, text="–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!")
        db.save()
    else:
        bot.send_message(call.from_user.id, text="–≠—Ö, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!")


@bot.callback_query_handler(func=lambda call: call.data in ['change skin', 'dont change skin']
                            and call.from_user.id in states and states[call.from_user.id] == "switching_skin")
def switch_skin_item(call: CallbackQuery):
    person_id = call.from_user.id
    if call.data == "change skin":
        new_name = case_data[0]
        match case_data[1]:
            case "helmet":
                db.set_head_skin(person_id, new_name)
            case "chestplate":
                db.set_body_skin(person_id, new_name)
            case "item1":
                db.set_weapon_skin(person_id, new_name)

        bot.send_message(person_id, text="–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!")
        db.save()
    else:
        bot.send_message(call.from_user.id, text="–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —ç—Ç–æ—Ç —Å–∫–∏–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ —Ç–µ–ø–µ—Ä—å –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")


skin_case_list = ["–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è —Ä–µ–ø–∞", "–ù–µ–π—Ä–æ–Ω–Ω—ã–π –∫—É–ø–æ–ª", "–¶–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è —á–µ—Ä–µ–ø–Ω–æ-–º–æ–∑–≥–æ–≤–∞—è –∫—Ä—ã—à–∫–∞", "–ë–∏–æ–Ω–∏—á–µ—Å–∫–∞—è –±–∞—à–Ω—è", "–ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ—Ç—ë–ª",
                  "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Å", "–°—Ç–∞–ª—å–Ω–æ–π –≥—Ä—É–¥–∞–∫", "–•—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—é—Å—Ç", "–¢–∏—Ç–∞–Ω–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å", "–ö–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å",
                  "–ö–∏–±–µ—Ä-–Ω–æ–∂", "–õ–∞–∑–µ—Ä–Ω—ã–π –∫–∏–Ω–∂–∞–ª", "–†–∞–∑—Ä—è–¥–Ω—ã–π –∫–æ–≥–æ—Ç—å", "–ë–∏–æ–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∑—É–±–µ—Ü", "–•–∏–º–∏—á–µ—Å–∫–∏–π –º–µ—á"]

bronze_case_list = ["–ú–æ–¥–Ω—ã–π –∫–µ–ø–∞—Ä–∏–∫", "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –Ω–æ–Ω", "–†—ã—Ü–∞—Ä—Å–∫–∏–π —à–ª–µ–º", "–ö–∏–±–µ—Ä—à–ª–µ–º –∏–∑ –ù–∞–π—Ç-—Å–∏—Ç–∏", "–°—Ç—Ä–∞–¥–∞–Ω–∏—è –ª–∏–∞–Ω–¥—Ä–∏",
                    "–§—É—Ç–±–æ–ª–∫–∞ —Ñ–∞–Ω–∞—Ç–∞ AC/DC", "–¢–æ–ª—Å—Ç–æ–≤–∫–∞ \"–õ—é–±–ª—é –¢–æ–º –Ø–º\"", "–†—ã—Ü–∞—Ä—Å–∫–∏–π –¥–æ—Å–ø–µ—Ö –∏–∑ –º—É–∑–µ—è –õ–æ–Ω–¥–æ–Ω–∞", "–õ—é–±–∏–º–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –í–∏", "–≠–≥–∏–¥–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –ø–ª–∞–º–µ–Ω–∏",
                    "–ì–∏—Ç–∞—Ä–∞", "–ü–∞–ª–æ—á–∫–∏ –¥–ª—è —Ä–∏—Å–∞", "–î–ª–∏–Ω–Ω—ã–π –º–µ—á", "–ö–∞—Ç–∞–Ω–∞ –ê—Ä–∞—Å–∞–∫–∏", "–ì—Ä–∞–Ω—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏",
                    "–í–æ–¥—è–Ω–æ–π –ø–∏—Å—Ç–æ–ª–µ—Ç", "–ú–∏—Å–∫–∞ —Ä–∏—Å –µ–¥–∞", "–õ—É–∫ –∏–º–ø–µ—Ä–∏–∏ –ú–∞–π—è", "–ü–∏—Å—Ç–æ–ª–µ—Ç –î–∂–æ–Ω–Ω–∏ –°–∏–ª—å–≤–µ—Ä—Ö–µ–Ω–¥–∞", "–£–±–∏–π—Ü–∞ –∫—Ä–∞–∫–µ–Ω–æ–≤"]

silver_case_list = ["–ü–∞–∫–µ—Ç –∏–∑ –ø–æ–¥ —á–∏–ø—Å–æ–≤", "–õ–µ—Ç–Ω—è—è –ø–∞–Ω–∞–º–∫–∞", "–ú–∞—Å–∫–∞ –î–∂–µ–π—Å–æ–Ω–∞", "–ú–∞—Å–∫–∞ –∑–ª–æ–¥–µ—è –∏–∑ –°–∫—É–±–∏-–î—É", "–®–∞–ø–∫–∞ –ú–æ–Ω–æ–º–∞—Ö–∞",
                    "–ü–ª–∞—â —Ä–∞–∑–≤–µ–¥–∫–æ—Ä–ø—É—Å–∞", "–ß–µ—Ä–Ω—ã–π –ø–ª–∞—â", "–ö–æ—Å—Ç—é–º –Ω–∞ –•—ç–ª–ª–æ—É–∏–Ω", "–ö–æ—Å—Ç—é–º –ß–µ–ª–æ–≤–µ–∫–∞-–ø–∞—É–∫–∞", "–ü—Ä–∏–∫–∏–¥ –ú–∞–π–∫–ª–∞ –î–∂–µ–∫—Å–æ–Ω–∞",
                    "–ë–æ–∫—Å–µ—Ä—Å–∫–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –†–æ–∫–∫–∏", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –±–∞–≥–µ—Ç", "–†–µ–∑–∏–Ω–æ–≤–∞—è —É—Ç–∫–∞", "–õ–µ—Å—Ç–Ω–∏—Ü–∞ –∏–∑ —Ñ–∏–ª—å–º–∞ –ø—Ä–æ –î–∂–µ–∫–∏ –ß–∞–Ω–∞", "–¢–æ–ø–æ—Ä –≤–∏–∫–∏–Ω–≥–∞",
                    "–ô–æ-–π–æ", "–†—É–∫–∏ –∏–∑ –•–∞–≥–∏ –≤–∞–≥–∏", "–•—É–∫ –ü—É–¥–∂–∞", "–õ–∞—Å—Å–æ –ò–Ω–¥–∏–∞–Ω—ã –î–∂–æ–Ω—Å–∞", "–¢—Ä–µ–±—É—à–µ—Ç"]

golden_case_list = ["–ú–∞—Å–∫–∞ –ñ–Ω–µ—Ü–∞", "–®–∞–ø–∫–∞ —Ö–∏–ø–ø–∏", "–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑", "–ú–∞—Å–∫–∞ –ö–∞–π–ª–∞ –ö—Ä–µ–π–Ω–∞", "–õ—é–±–∏–º–∞—è –∫–µ–ø–∫–∞ –±–æ—Å—Å–∞",
                    "–ö–æ—Å—Ç—é–º –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞", "–•–∞–ª–∞—Ç —É—á–µ–Ω–æ–≥–æ", "Mark 7", "–ö—É—Ä—Ç–∫–∞ –Ω–æ—á–Ω–æ–≥–æ –±–µ–≥—É–Ω–∞", "–ö–æ—Å–ø–ª–µ–π",
                    "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–≤–µ–∑–¥–æ–ª–µ—Ç", "–ö–∞—Ä–∞–Ω–¥–∞—à –î–∂–æ–Ω–∞ –£–∏–∫–∞", "–ö–ª–∏–Ω–∫–∏ –Ω–µ—Ä–∞–∑–∏–º–æ–≤", "–î—É–±–∏–Ω–∫–∞ –∏–∑ –•–∞—Ä—Ä–∞–Ω–∞", "–õ—É–∫-–ø–æ—Ä–µ–π –•–∞—Ç—Å—É–Ω–µ –ú–∏–∫—É",
                    "–ü—É–ª–µ–º–µ—Ç –ß–∞–∫–∞ –ù–æ—Ä—Ä–∏—Å–∞", "–ü–∞–ª–æ—á–∫–∞ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞", "–í–∏–Ω—Ç–æ–≤–∫–∞ –î–∂–∏–º–∞ –†–µ–π–Ω–æ—Ä–∞", "–ö—Ä—é–∫-–∫–æ—à–∫–∞", "–°–∞–ª—é—Ç-–≤–∑—Ä—ã–≤"]


open_case_list = ["–û—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–Ω–∑–æ–≤—ã–π —Å—É–Ω–¥—É–∫", "–û—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—É–Ω–¥—É–∫",
                  "–û—Ç–∫—Ä—ã—Ç—å –∑–æ–ª–æ—Ç–æ–π —Å—É–Ω–¥—É–∫", "–û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫ —Å–∫–∏–Ω–æ–≤"]


@bot.message_handler(func=lambda message: message.text in open_case_list)
def get_item_from_case(message: Message):
    person_id = message.from_user.id
    case_type = ""
    if message.text == open_case_list[0]:
        case_type = "bronze"
        if db.get_bronze_count(person_id) == 0:
            bot.send_message(message.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–æ–Ω–∑–æ–≤—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤!")
            return
    elif message.text == open_case_list[1]:
        case_type = "silver"
        if db.get_silver_count(person_id) == 0:
            bot.send_message(message.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤!")
            return
    elif message.text == open_case_list[2]:
        case_type = "gold"
        if db.get_gold_count(person_id) == 0:
            bot.send_message(message.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤!")
            return
    elif message.text == open_case_list[3]:
        case_type = "skin"
        if db.get_skin_count(person_id) == 0:
            bot.send_message(message.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—É–Ω–¥—É–∫–æ–≤ —Å–æ —Å–∫–∏–Ω–∞–º–∏!")
            return

    result = int(random.random() * 100)
    if case_type == "skin":
        type_result = int(random.random() * 3)
    else:
        type_result = int(random.random() * 4)
    list_navigator = type_result
    number_of_item_in_list = 0

    item_name = ""
    item_type = type_result
    item_stats = 0
    item_mod = "–ü—É—Å—Ç–æ"
    item_rare = ""

    case_list = []
    match case_type:
        case "bronze":
            case_list = bronze_case_list
            db.set_bronze_count(person_id, db.get_bronze_count(person_id) - 1)
            db.save()
        case "silver":
            case_list = silver_case_list
            db.set_silver_count(person_id, db.get_silver_count(person_id) - 1)
            db.save()
        case "gold":
            case_list = golden_case_list
            db.set_golden_count(person_id, db.get_golden_count(person_id) - 1)
            db.save()
        case "skin":
            case_list = skin_case_list
            db.set_skin_count(person_id, db.get_skin_count(person_id) - 1)
            db.save()

    if result < 35:
        item_rare = "–æ–±—ã—á–Ω—ã–π"
        number_of_item_in_list = 0

    elif result < 70:
        item_rare = "–æ–±—ã—á–Ω—ã–π"
        number_of_item_in_list = 1

    elif result < 84:
        item_rare = "—Ä–µ–¥–∫–∏–π"
        number_of_item_in_list = 2

    elif result < 98:
        item_rare = "—Ä–µ–¥–∫–∏–π"
        number_of_item_in_list = 3

    else:
        item_rare = "—ç–ø–∏—á–µ—Å–∫–∏–π"
        number_of_item_in_list = 4

    item_name = case_list[list_navigator * 5 + number_of_item_in_list]
    if case_type != "skin":
        level = int(db.get_level(person_id))

        if item_type == 0:
            item_stats = int(math.sqrt(((number_of_item_in_list + 2) // 2) * level + 1)
                             * 2 * math.sqrt(random.random() * 30 + 15))
            mod_random = random.random() * 100
            if mod_random < 80:
                item_mod = "–ì–æ—Å—Å—Ç–∞–Ω–¥–∞—Ä—Ç"
            elif mod_random < 95:
                item_mod = "–¢–æ–ª—å–∫–æ –º–µ—á–æ–º"
            else:
                item_mod = "–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞"
        elif item_type == 1:
            item_stats = int(math.sqrt(((number_of_item_in_list + 2) // 2) * level + 1)
                             * 0.05 * math.sqrt(random.random() * 30 + 15))
            mod_random = random.random() * 100
            if mod_random < 80:
                item_mod = "–ü–µ—Ä–Ω–∞—Ç–∞—è –±—Ä–æ–Ω—è"
            elif mod_random < 95:
                item_mod = "–ë–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤"
            else:
                item_mod = "–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏"
        elif item_type == 2:
            item_stats = int(math.sqrt(((number_of_item_in_list + 2) // 2) * level + 1)
                             * 0.5 * math.sqrt(random.random() * 30 + 15))
            mod_random = random.random() * 100
            if mod_random < 85:
                item_mod = "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞"
            elif mod_random < 95:
                item_mod = "–ö—Ä–∏—Ç–æ–≤—ã–π –ø–æ–ø—É–≥"
            else:
                item_mod = "–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤"
        elif item_type == 3:
            item_stats = int(math.sqrt(((number_of_item_in_list + 2) // 2) * level + 1)
                             * 0.8 * math.sqrt(random.random() * 30 + 15))
        switch_item_from_case(message, person_id, item_type, item_name, item_stats, item_mod, item_rare)
    else:
        switch_skin_from_case(message, person_id, item_type, item_name, item_rare)


def experience_change(person_id, experience):
    lvl_from_table = int(db.get_level(person_id))
    exp_needed = int(math.sqrt(lvl_from_table * 60) * 30)
    exp_got = db.get_experience(person_id) + experience
    while exp_got >= exp_needed:
        exp_got -= exp_needed
        lvl_from_table += 1
        exp_needed = int(math.sqrt(lvl_from_table * 60) * 30)
        factor = lvl_from_table ** (1.2 / 3.0)
        current_health = int(factor * db.get_health(person_id))
        current_strength = int(factor * db.get_strength(person_id))
        db.set_lvl(person_id, lvl_from_table)
        db.set_health(person_id, current_health)
        db.set_strength(person_id, current_strength)
        db.set_bronze_count(person_id, db.get_bronze_count(person_id) + 1)
        bot.send_message(person_id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—Ä–æ–Ω–∑–æ–≤—ã–π —Å—É–Ω–¥—É–∫!")
        silver_count = db.get_silver_count(person_id)
        golden_count = db.get_golden_count(person_id)
        skin_count = db.get_skin_count(person_id)
        if lvl_from_table % 2 == 0:
            db.set_silver_count(person_id, silver_count + 1)
            bot.send_message(person_id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—É–Ω–¥—É–∫!")
        if lvl_from_table % 4 == 0:
            db.set_golden_count(person_id, golden_count + 1)
            bot.send_message(person_id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–æ–ª–æ—Ç–æ–π —Å—É–Ω–¥—É–∫!")
        if lvl_from_table % 8 == 0:
            db.set_skin_count(person_id, skin_count + 1)
            bot.send_message(person_id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—É–Ω–¥—É–∫ —Å–æ —Å–∫–∏–Ω–∞–º–∏!")
        db.save()
        bot.send_message(person_id, text=f'–£—Ä–∞! –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—Ä–æ—Å! \n'
                                         f'–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: ___{lvl_from_table}___ \n'
                                         f'–¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ___{current_health}___ \n'
                                         f'–¢–≤–æ—è —Å–∏–ª–∞: ___{current_strength}___')
    db.set_exp(person_id, exp_got)
    db.save()


# –ë–û–ò

kb = InlineKeyboardMarkup(row_width=1)
btn_accept = InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='accept')
kb.add(btn_accept)
btn_cancel = InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å', callback_data='cancel')
kb.add(btn_cancel)

op_id = 0
my_id = 0
op_name = ""


@bot.message_handler(func=lambda message: str(message.text.lower()).split()[0] in ['–±–æ–π'])
def attack(message: Message):
    global op_id, my_id, op_name
    my_id = message.from_user.id
    op_id = db.get_player_id(message.text.split(" ", 1)[1][1:])
    op_name = message.text.split(" ", 1)[1][1:]
    states[my_id] = "waiting_for_attack"
    bot.send_message(message.chat.id, f'{message.text.split(" ", 1)[1]}, –í–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –±–æ–π', reply_markup=kb)


class OpFilter(custom_filters.AdvancedCustomFilter):
    key = 'set_op_id'

    def check(self, message, text):
        if isinstance(message, CallbackQuery):
            return message.message.from_user.id in text
        return message.from_user.id in text


@bot.callback_query_handler(func=lambda call: call.data in ['accept', 'cancel'])
def attack_user(call: CallbackQuery):
    print(my_id, op_id)
    print(call.message.text)

    if call.data == "accept":
        #     bot.send_photo(call.message.chat.id,photo=photo)
        my_standard_damage = int(db.get_strength(my_id))
        op_standard_damage = int(db.get_strength(op_id))
        my_first_item_damage = db.get_worn_item_stats(my_id, "item1")
        op_first_item_damage = db.get_worn_item_stats(op_id, "item1")
        my_second_item_damage = db.get_worn_item_stats(my_id, "item2")
        op_second_item_damage = db.get_worn_item_stats(op_id, "item2")
        my_item_ability = db.get_worn_item_mod(my_id, "item1")
        op_item_ability = db.get_worn_item_mod(op_id, "item1")
        my_helmet_hp = db.get_worn_item_stats(my_id, "helmet")
        op_helmet_hp = db.get_worn_item_stats(op_id, "helmet")
        my_helmet_ability = db.get_worn_item_mod(my_id, "helmet")
        op_helmet_ability = db.get_worn_item_mod(op_id, "helmet")
        my_chest_plate_armor = db.get_worn_item_stats(my_id, "chestplate")
        op_chest_plate_armor = db.get_worn_item_stats(op_id, "chestplate")
        my_chest_plate_ability = db.get_worn_item_mod(my_id, "chestplate")
        op_chest_plate_ability = db.get_worn_item_mod(op_id, "chestplate")

        if my_helmet_ability == "–ì–æ—Å—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
            my_hp = int(int(db.get_health(my_id)) * 1.05) + my_helmet_hp
        else:
            my_hp = int(db.get_health(my_id)) + my_helmet_hp
        if op_helmet_ability == "–ì–æ—Å—Å—Ç–∞–Ω–¥–∞—Ä—Ç":
            op_hp = int(int(db.get_health(op_id)) * 1.05) + op_helmet_hp
        else:
            op_hp = int(db.get_health(op_id)) + op_helmet_hp

        my_armor = my_chest_plate_armor
        op_armor = op_chest_plate_armor

        attacker = "me"
        my_turn = 0
        op_turn = 0

        while my_hp > 0 and op_hp > 0:
            sum_damage = 0
            wisdom_of_ara_flag = 0
            only_sword_flag = 0
            poisonous_armor_flag = 0
            no_mods_flag = 0
            gods_killer_flag = 0
            krit_perrot_flag = 0

            if attacker == "me":
                last_hp = op_hp
                my_turn += 1

                sum_damage += my_standard_damage
                if my_turn % 3 == 0:
                    if op_helmet_ability == "–¢–æ–ª—å–∫–æ –º–µ—á–æ–º" and int(random.random() * 100) <= 14:
                        sum_damage += int(my_second_item_damage * 0.8)
                        only_sword_flag = 1
                    else:
                        sum_damage += my_second_item_damage
                    if op_helmet_ability == "–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞" and int(random.random() * 100) <= 9:
                        wisdom_of_ara_flag = 1
                    elif op_chest_plate_ability == "–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏" and int(random.random() * 100) <= 4:
                        my_hp -= int(sum_damage * (1 - my_armor))
                        poisonous_armor_flag = 1
                    else:
                        op_hp -= int(sum_damage * (1 - op_armor))
                else:
                    sum_damage += my_first_item_damage
                    if op_chest_plate_ability == "–ë–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤" and int(random.random() * 100) <= 14:
                        op_hp -= int(sum_damage * (1 - op_armor))
                        no_mods_flag = 1
                    else:
                        if my_item_ability == "–ö—Ä–∏—Ç–æ–≤—ã–π –ø–æ–ø—É–≥" and int(random.random() * 100) <= 4:
                            sum_damage = int(sum_damage * 1.4)
                            krit_perrot_flag = 1
                        elif my_item_ability == "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞":
                            sum_damage += int(my_first_item_damage * 0.01)
                        if op_helmet_ability == "–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞" and int(random.random() * 100) <= 9:
                            wisdom_of_ara_flag = 1
                        elif op_chest_plate_ability == "–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏" and int(random.random() * 100) <= 4:
                            if my_item_ability == "–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤" and int(random.random() * 100) <= 4:
                                my_hp -= sum_damage
                                gods_killer_flag = 1
                                poisonous_armor_flag = 1
                            else:
                                my_hp -= int(sum_damage * (1 - my_armor))
                                poisonous_armor_flag = 1
                        else:
                            if my_item_ability == "–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤" and int(random.random() * 100) <= 4:
                                op_hp -= sum_damage
                                gods_killer_flag = 1
                            else:
                                op_hp -= int(sum_damage * (1 - op_armor))

                mods_attack_list = []
                mods_defend_list = []

                if wisdom_of_ara_flag == 1:
                    mods_defend_list.append("–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞")
                if only_sword_flag == 1:
                    mods_defend_list.append("–¢–æ–ª—å–∫–æ –º–µ—á–æ–º")
                if poisonous_armor_flag == 1:
                    mods_defend_list.append("–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏")
                if no_mods_flag == 1:
                    mods_attack_list.append("–ë–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤")
                if gods_killer_flag == 1:
                    mods_attack_list.append("–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤")
                if krit_perrot_flag == 1:
                    mods_attack_list.append("–ö—Ä–∏—Ç–æ–≤—ã–π –ø–æ–ø—É–≥")

                bot.send_message(my_id, f'–ê—Ç–∞–∫—É–µ—Ç - *{db.get_pet_name(my_id)}* \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_attack_list}___ \n' +
                                 f'–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ___{sum_damage}___ \n' +
                                 f'–ó–∞—â–∏—â–∞–µ—Ç—Å—è - ___{db.get_pet_name(op_id)}___ \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_defend_list}___ \n' +
                                 f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: ___{last_hp - op_hp}___')

                bot.send_message(op_id, f'–ê—Ç–∞–∫—É–µ—Ç - *{db.get_pet_name(my_id)}* \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_attack_list}___ \n' +
                                 f'–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ___{sum_damage}___ \n' +
                                 f'–ó–∞—â–∏—â–∞–µ—Ç—Å—è - ___{db.get_pet_name(op_id)}___ \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_defend_list}___ \n' +
                                 f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: ___{last_hp - op_hp}___')
                attacker = "opponent"

            else:
                op_turn += 1
                sum_damage += op_standard_damage
                last_hp = my_hp

                if op_turn % 3 == 0:
                    if my_helmet_ability == "–¢–æ–ª—å–∫–æ –º–µ—á–æ–º" and int(random.random() * 100) <= 14:
                        sum_damage += int(op_second_item_damage * 0.8)
                        only_sword_flag = 1
                    else:
                        sum_damage += op_second_item_damage
                    if my_helmet_ability == "–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞" and int(random.random() * 100) <= 9:
                        wisdom_of_ara_flag = 1
                    elif my_chest_plate_ability == "–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏" and int(random.random() * 100) <= 4:
                        op_hp -= int(sum_damage * (1 - op_armor))
                        poisonous_armor_flag = 1
                    else:
                        my_hp -= int(sum_damage * (1 - my_armor))
                else:
                    sum_damage += op_first_item_damage
                    if my_chest_plate_ability == "–ë–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤" and int(random.random() * 100) <= 14:
                        my_hp -= int(sum_damage * (1 - my_armor))
                        no_mods_flag = 1
                    else:
                        if op_item_ability == "–ö—Ä–∏—Ç–æ–≤—ã–π –ø–æ–ø—É–≥" and int(random.random() * 100) <= 4:
                            sum_damage = int(sum_damage * 1.4)
                            krit_perrot_flag = 1
                        elif op_item_ability == "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞":
                            sum_damage += int(op_first_item_damage * 0.01)
                        if my_helmet_ability == "–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞" and int(random.random() * 100) <= 9:
                            wisdom_of_ara_flag = 1
                        elif my_chest_plate_ability == "–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏" and int(random.random() * 100) <= 4:
                            if op_item_ability == "–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤" and int(random.random() * 100) <= 4:
                                op_hp -= sum_damage
                                poisonous_armor_flag = 1
                                gods_killer_flag = 1
                            else:
                                op_hp -= int(sum_damage * (1 - op_armor))
                                poisonous_armor_flag = 1
                        else:
                            if op_item_ability == "–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤" and int(random.random() * 100) <= 4:
                                my_hp -= sum_damage
                                gods_killer_flag = 1
                            else:
                                my_hp -= int(sum_damage * (1 - my_armor))

                mods_attack_list = []
                mods_defend_list = []

                if wisdom_of_ara_flag == 1:
                    mods_defend_list.append("–ú—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä–∞")
                if only_sword_flag == 1:
                    mods_defend_list.append("–¢–æ–ª—å–∫–æ –º–µ—á–æ–º")
                if poisonous_armor_flag == 1:
                    mods_defend_list.append("–Ø–¥–æ–≤–∏—Ç—ã–µ –¥–æ—Å–ø–µ—Ö–∏")
                if no_mods_flag == 1:
                    mods_attack_list.append("–ë–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤")
                if gods_killer_flag == 1:
                    mods_attack_list.append("–£–±–∏–π—Ü–∞ –±–æ–≥–æ–≤")
                if krit_perrot_flag == 1:
                    mods_attack_list.append("–ö—Ä–∏—Ç–æ–≤—ã–π –ø–æ–ø—É–≥")

                bot.send_message(my_id, f'–ê—Ç–∞–∫—É–µ—Ç - *{db.get_pet_name(op_id)}* \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_attack_list}___ \n' +
                                 f'–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ___{sum_damage}___ \n' +
                                 f'–ó–∞—â–∏—â–∞–µ—Ç—Å—è - ___{db.get_pet_name(my_id)}___ \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_defend_list}___ \n' +
                                 f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: ___{last_hp - my_hp}___')

                bot.send_message(op_id, f'–ê—Ç–∞–∫—É–µ—Ç - *{db.get_pet_name(op_id)}* \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_attack_list}___ \n' +
                                 f'–í—Å–µ–≥–æ —É—Ä–æ–Ω–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏: ___{sum_damage}___ \n' +
                                 f'–ó–∞—â–∏—â–∞–µ—Ç—Å—è - ___{db.get_pet_name(my_id)}___ \n' +
                                 f'–ú–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–∞—É–Ω–¥–µ: ___{mods_defend_list}___ \n' +
                                 f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: ___{last_hp - my_hp}___')

                attacker = "me"

        if my_hp <= 0:
            stolen_cookies = int(random.random() * db.get_balance(my_id) / 5)
            bot.send_message(my_id, f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - *{db.get_pet_name(op_id)}* \n'
                                    f'–æ–Ω –∫—Ä–∞–¥–µ—Ç —É {db.get_pet_name(my_id)} ___{stolen_cookies}___ –ø–µ—á–µ–Ω–µ–∫\n')
            bot.send_message(op_id, f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - *{db.get_pet_name(op_id)}* \n'
                                    f'–æ–Ω –∫—Ä–∞–¥–µ—Ç —É {db.get_pet_name(my_id)} ___{stolen_cookies}___ –ø–µ—á–µ–Ω–µ–∫\n')
        else:
            stolen_cookies = int(random.random() * db.get_balance(op_id) / 5)
            bot.send_message(my_id, f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - *{db.get_pet_name(my_id)}* \n'
                                    f'–æ–Ω –∫—Ä–∞–¥–µ—Ç —É {db.get_pet_name(op_id)} ___{stolen_cookies}___ –ø–µ—á–µ–Ω–µ–∫\n')
            bot.send_message(op_id, f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - *{db.get_pet_name(op_id)}* \n'
                                    f'–æ–Ω –∫—Ä–∞–¥–µ—Ç —É {db.get_pet_name(op_id)} ___{stolen_cookies}___ –ø–µ—á–µ–Ω–µ–∫\n')

    elif call.data == "cancel":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–ë–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω")


# –ë–û–ò


# CustomizePet
def CreatePetImage(number_of_body, number_of_head, number_of_weapon):
    way_to_body = "app/Images/Body" + number_of_body + ".png"
    way_to_head = "app/Images/Head" + number_of_head + ".png"
    way_to_weapon = "app/Images/Weapon" + number_of_weapon + ".png"
    weapon_image = Image.open(way_to_weapon)
    body_image = Image.open(way_to_body)
    head_image = Image.open(way_to_head)
    body_with_head_image = Image.alpha_composite(body_image, head_image)
    pet_image = Image.alpha_composite(body_with_head_image, weapon_image)
    white_background = Image.new("RGBA", (768, 768), (255, 255, 255))
    pet_image = Image.alpha_composite(white_background, pet_image)
    return pet_image


def CreateVersusImage(first_pet, second_pet):
    versus_image = Image.open("app/Images/Versus.png")
    white_background = Image.new("RGBA", (464, 768), (255, 255, 255))
    versus_image = Image.alpha_composite(white_background, versus_image)
    first_pet = ImageOps.mirror(first_pet)
    new_image = Image.new("RGBA", (2000, 768), (255, 255, 255))
    new_image.paste(first_pet, (0, 0))
    new_image.paste(versus_image, (768, 0))
    new_image.paste(second_pet, (1232, 0))
    return new_image


'''
sl_head={3:"–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è —Ä–µ–ø–∞", 4: "–ù–µ–π—Ä–æ–Ω–Ω—ã–π –∫—É–ø–æ–ª", 2: "–¶–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è —á–µ—Ä–µ–ø–Ω–æ-–º–æ–∑–≥–æ–≤–∞—è –∫—Ä—ã—à–∫–∞", 1: "–ë–∏–æ–Ω–∏—á–µ—Å–∫–∞—è –±–∞—à–Ω—è", 5: "–ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ—Ç—ë–ª"}
sl_body={1:"–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Å", 2:"–°—Ç–∞–ª—å–Ω–æ–π –≥—Ä—É–¥–∞–∫", 5: "–•—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—é—Å—Ç", 3:"–¢–∏—Ç–∞–Ω–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å", 4:"–ö–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å"}
sl_weapon={1:"–ö–∏–±–µ—Ä-–Ω–æ–∂", 2:"–õ–∞–∑–µ—Ä–Ω—ã–π –∫–∏–Ω–∂–∞–ª", 3:"–†–∞–∑—Ä—è–¥–Ω—ã–π –∫–æ–≥–æ—Ç—å", 4:"–ë–∏–æ–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∑—É–±–µ—Ü", 5:"–•–∏–º–∏—á–µ—Å–∫–∏–π –º–µ—á"}
'''


def InlineMarkupFromList(l):
    inline_markup = InlineKeyboardMarkup()
    for each in l:
        inline_markup.add(InlineKeyboardButton(text=each, switch_inline_query_current_chat=each))
    return inline_markup


@bot.message_handler(commands=["customize_pet"])
def CustomizePet(message: Message):
    cur_body = db.get_body_skin(message.from_user.id)
    cur_head = db.get_head_skin(message.from_user.id)
    cur_weapon = db.get_weapon_skin(message.from_user.id)

    pet_image = CreatePetImage(cur_body, cur_head, cur_weapon)
    bot.send_message(message.chat.id, "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂:")
    bot.send_photo(message.chat.id, pet_image)
    markup_to_customize = InlineMarkupFromList(["–ì–æ–ª–æ–≤—É", "–¢–µ–ª–æ", "–û—Ä—É–∂–∏–µ", "–û—Ç–º–µ–Ω–∞"])
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup_to_customize)
    states[message.from_user.id] = 'choose_part_to_change'


@bot.message_handler(func=lambda message: message.from_user.id in states and
                                          states[message.from_user.id] in [
                                              'choose_part_to_change',
                                              'change_head',
                                              'change_body',
                                              'change_weapon'
                                          ])


def Customizing(message: Message):
    current_state = str(states[message.from_user.id])
    cur_body = db.get_body_skin(message.from_user.id)
    cur_head = db.get_head_skin(message.from_user.id)
    cur_weapon = db.get_weapon_skin(message.from_user.id)
    available_heads = db.get_all_head_skins(message.from_user.id)
    available_bodies = db.get_all_body_skins(message.from_user.id)
    available_weapons = db.get_all_weapon_skins(message.from_user.id)

    match current_state:
        case "choose_part_to_change":
            match message.text.split()[1]:
                case "–ì–æ–ª–æ–≤—É":
                    markup_to_customize = InlineMarkupFromList(available_heads + ["–û—Ç–º–µ–Ω–∞"])
                    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∞—è: " + cur_head + ". –î–æ—Å—Ç—É–ø–Ω—ã–µ:",
                                     reply_markup=markup_to_customize)
                    states[message.from_user.id] = 'change_head'

                case "–¢–µ–ª–æ":
                    markup_to_customize = InlineMarkupFromList(available_bodies + ["–û—Ç–º–µ–Ω–∞"])
                    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∞—è: " + cur_body + ". –î–æ—Å—Ç—É–ø–Ω—ã–µ:",
                                     reply_markup=markup_to_customize)
                    states[message.from_user.id] = 'change_body'

                case "–û—Ä—É–∂–∏–µ":
                    markup_to_customize = InlineMarkupFromList(available_weapons + ["–û—Ç–º–µ–Ω–∞"])
                    bot.send_message(message.chat.id, "–¢–µ–∫—É—â–µ–µ: " + cur_weapon + ". –î–æ—Å—Ç—É–ø–Ω—ã–µ:",
                                     reply_markup=markup_to_customize)
                    states[message.from_user.id] = 'change_weapon'

                case "–û—Ç–º–µ–Ω–∞":
                    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())

        case 'change_head':
            cur_head = message.text.split()[1]
            if cur_head in available_heads:
                db.set_head_skin(message.from_user.id, cur_head)
                db.save()
                pet_image = CreatePetImage(cur_body, cur_head, cur_weapon)
                bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:", reply_markup=ReplyKeyboardRemove())
                bot.send_photo(message.chat.id, pet_image)
            elif cur_head == "–û—Ç–º–µ–Ω–∞":
                bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–Ω–Ω—ã–π —Å–∫–∏–Ω", reply_markup=ReplyKeyboardRemove())

        case 'change_body':
            cur_body = message.text.split()[1]
            if cur_body in available_bodies:
                db.set_body_skin(message.from_user.id, cur_body)
                db.save()
                pet_image = CreatePetImage(cur_body, cur_head, cur_weapon)
                bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:", reply_markup=ReplyKeyboardRemove())
                bot.send_photo(message.chat.id, pet_image)
            elif cur_body == "–û—Ç–º–µ–Ω–∞":
                bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–Ω–Ω—ã–π —Å–∫–∏–Ω", reply_markup=ReplyKeyboardRemove())

        case 'change_weapon':
            cur_weapon = message.text.split()[1]
            if cur_weapon in available_weapons:
                db.set_weapon_skin(message.from_user.id, cur_weapon)
                db.save()
                pet_image = CreatePetImage(cur_body, cur_head, cur_weapon)
                bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:", reply_markup=ReplyKeyboardRemove())
                bot.send_photo(message.chat.id, pet_image)
            elif cur_weapon == "–û—Ç–º–µ–Ω–∞":
                bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, "–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–Ω–Ω—ã–π —Å–∫–∏–Ω", reply_markup=ReplyKeyboardRemove())

def init_events():
    lst_of_regular = db.fetchall("regular_event")
    
    global event_data
    
    for regular in lst_of_regular:
        id, name, user_id, description, exp, deadline, deadline_type, players, chat_id = regular
        event_data[int(id)] = (name,description,exp)
        participants_of_regular[id] = players
        match deadline_type:
                case '–º–∏–Ω—É—Ç–∞—Ö':
                    schedule.every(int(deadline)).minutes.do(run_threaded, chat_id=int(chat_id),table="regular_event", id=int(id)).tag(int(id))
                case '—á–∞—Å–∞—Ö':
                    schedule.every(int(deadline)).hours.do(run_threaded, chat_id=int(chat_id), table="regular_event", id=int(id)).tag(int(id))
                case '–¥–Ω—è—Ö':
                    schedule.every(int(deadline)).days.do(run_threaded, chat_id=int(chat_id), table="regular_event", id=int(id)).tag(int(id))
                case '–Ω–µ–¥–µ–ª—è—Ö':
                    schedule.every(int(deadline)).weeks.do(run_threaded, chat_id=int(chat_id), table="regular_event", id=int(id)).tag(int(id))
    
    lst = db.fetchall("event")

    for event in lst:
        id, name, user_id, description, exp, deadline, deadline_type, chat_id = event
        event_data[int(user_id)] = (name,description,exp)
        match deadline_type:
                case '–º–∏–Ω—É—Ç–∞—Ö':
                    schedule.every(int(deadline)).minutes.do(run_threaded, chat_id=int(chat_id),table="event", id=int(user_id)).tag(int(user_id))
                case '—á–∞—Å–∞—Ö':
                    schedule.every(int(deadline)).hours.do(run_threaded, chat_id=int(chat_id),table="event", id=int(user_id)).tag(int(user_id))
                case '–¥–Ω—è—Ö':
                    schedule.every(int(deadline)).days.do(run_threaded, chat_id=int(chat_id),table="event", id=int(user_id)).tag(int(user_id))
                case '–Ω–µ–¥–µ–ª—è—Ö':
                    schedule.every(int(deadline)).weeks.do(run_threaded, chat_id=int(chat_id),table="event", id=int(user_id)).tag(int(user_id))
    


# CustomizePet

def run_polling():
    global last_regular_event
    print("Bot has been started...")
    bot.add_custom_filter(OpFilter())
    Thread(target=check_scheduler).start()
    init_events()
    last_regular_event = db.get_last_regular()
    while True:
       # try:
            bot.polling(skip_pending=True)

        ##except Exception as err:
         #   bot.send_message(771366061, text=f'–í—Ä–µ–º—è: {datetime.now()}\n'
           #                              f'–¢–∏–ø: {err.__class__}\n'
          #                               f'–û—à–∏–±–∫–∞: {err}')
